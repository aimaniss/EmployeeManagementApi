using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using EmployeeManagementAPI.Data;
using EmployeeManagementAPI.Models;
using System.Threading.Tasks;
using System.Linq;
using System;

namespace EmployeeManagementAPI.Controllers
{
    public class DepartmentController : Controller
    {
        private readonly EmployeeContext _context;

        public DepartmentController(EmployeeContext context)
        {
            _context = context;
        }

        // GET: Departments/Index
        public async Task<IActionResult> Index()
        {
            // Fetch departments and include their associated employees (if needed)
            return View(await _context.Departments.Include(d => d.Employees).ToListAsync());
        }

        // GET: Departments/Create
        public IActionResult Create()
        {
            return View();
        }

        // POST: Departments/Create
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create([Bind("DepartmentName, Location")] Department department)
        {
            if (ModelState.IsValid)
            {
                try
                {
                    _context.Add(department); // DepartmentID will be auto-generated by the database
                    await _context.SaveChangesAsync(); // Save the new department
                    return RedirectToAction(nameof(Index)); // Redirect to the department list after save
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error: {ex.Message}"); // Log any errors to the console
                    ModelState.AddModelError("", "Unable to save changes. Try again, and if the problem persists, see your system administrator.");
                }
            }

            return View(department); // Return to the view with errors if any
        }

        // GET: Departments/Edit/5
        public async Task<IActionResult> Edit(int? id)
        {
            if (id == null)
                return NotFound();

            var department = await _context.Departments.FindAsync(id);
            if (department == null)
                return NotFound();

            return View(department); // Return the department for editing
        }

        // POST: Departments/Edit/5
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(int id, [Bind("DepartmentID, DepartmentName, Location")] Department department)
        {
            if (id != department.DepartmentID)
                return NotFound();

            if (ModelState.IsValid)
            {
                try
                {
                    _context.Update(department);
                    await _context.SaveChangesAsync();
                }
                catch (DbUpdateConcurrencyException)
                {
                    if (!DepartmentExists(department.DepartmentID))
                        return NotFound();
                    else
                        throw; // Rethrow if there's a concurrency issue
                }
                return RedirectToAction(nameof(Index)); // Redirect after successful edit
            }
            return View(department); // Return the department if ModelState is invalid
        }

        // Inline Edit: Handles saving updates directly from the Index view
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> EditInline(int DepartmentID, string DepartmentName, string Location)
        {
            var department = await _context.Departments.FindAsync(DepartmentID);

            if (department != null)
            {
                // Update department properties
                department.DepartmentName = DepartmentName;
                department.Location = Location;

                try
                {
                    _context.Update(department);
                    await _context.SaveChangesAsync();
                }
                catch (DbUpdateConcurrencyException)
                {
                    if (!DepartmentExists(DepartmentID))
                        return NotFound();
                    else
                        throw;
                }
            }

            return RedirectToAction(nameof(Index)); // Reload the page after saving
        }

        // GET: Departments/Delete/5
        public async Task<IActionResult> Delete(int? id)
        {
            if (id == null)
                return NotFound();

            var department = await _context.Departments
                .FirstOrDefaultAsync(m => m.DepartmentID == id);
            if (department == null)
                return NotFound();

            return View(department); // Return the department to confirm deletion
        }

        // POST: Departments/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteConfirmed(int id)
        {
            var department = await _context.Departments.FindAsync(id);
            if (department != null)
            {
                _context.Departments.Remove(department);
                await _context.SaveChangesAsync();
            }

            return RedirectToAction(nameof(Index)); // Redirect to the department list after deletion
        }

        private bool DepartmentExists(int id)
        {
            return _context.Departments.Any(e => e.DepartmentID == id);
        }
    }
}
